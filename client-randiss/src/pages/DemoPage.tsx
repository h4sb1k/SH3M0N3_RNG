import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  LinearProgress,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Chip,
} from '@mui/material';
import {
  PlayArrow,
  Refresh,
  Science,
  CheckCircle,
  Error,
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import axios from 'axios';
import EntropyTransformation from '../components/EntropyTransformation';
import RandomWalk from '../components/RandomWalk';
import QuantumField from '../components/QuantumField';

interface DemoStep {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'active' | 'completed' | 'error';
  data?: any;
  duration: number;
}

interface EntropySource {
  name: string;
  displayName: string;
  type: string;
  icon: string;
  available: boolean;
}

const DemoPage: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [entropyData, setEntropyData] = useState<EntropySource[]>([]);
  const [statisticalResults, setStatisticalResults] = useState<any>(null);
  const [animationProgress, setAnimationProgress] = useState(0);
  const [showSteps, setShowSteps] = useState(false);
  const [visualizationType, setVisualizationType] = useState<'transformation' | 'randomwalk' | 'quantum'>('transformation');

  const demoSteps: DemoStep[] = [
    {
      id: 'init',
      title: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä—É —ç–Ω—Ç—Ä–æ–ø–∏–∏. –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —ç–Ω—Ç—Ä–æ–ø–∏–∏.',
      status: 'pending',
      duration: 1500,
    },
    {
      id: 'entropy',
      title: '–°–±–æ—Ä —ç–Ω—Ç—Ä–æ–ø–∏–∏',
      description: '–°–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –º–∞—è–∫–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —à—É–º—ã, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.',
      status: 'pending',
      duration: 2500,
    },
    {
      id: 'combine',
      title: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏',
      description: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ SHA-512.',
      status: 'pending',
      duration: 2000,
    },
    {
      id: 'generate',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏.',
      status: 'pending',
      duration: 1500,
    },
    {
      id: 'test',
      title: '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã',
      description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ NIST –∏ DIEHARD —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏.',
      status: 'pending',
      duration: 2500,
    },
    {
      id: 'verify',
      title: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.',
      status: 'pending',
      duration: 1000,
    },
  ];

  const [steps, setSteps] = useState<DemoStep[]>(demoSteps);

  const startDemo = async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, —à–∞–≥–∏:', demoSteps.length);
    setIsRunning(true);
    setCurrentStep(0);
    setAnimationProgress(0);
    setEntropyData([]);
    setStatisticalResults(null);
    setShowSteps(true);

    for (let i = 0; i < demoSteps.length; i++) {
      setCurrentStep(i);
      setSteps(prev => prev.map((step, index) => ({
        ...step,
        status: index === i ? 'active' : index < i ? 'completed' : 'pending'
      })));

      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      await simulateStep(demoSteps[i]);

      setSteps(prev => prev.map((step, index) => ({
        ...step,
        status: index <= i ? 'completed' : 'pending'
      })));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
      setAnimationProgress(((i + 1) / demoSteps.length) * 100);

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    setIsRunning(false);
  };

  const simulateStep = async (step: DemoStep) => {
    await new Promise(resolve => setTimeout(resolve, step.duration));

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    switch (step.id) {
      case 'entropy':
        try {
          const sourcesResponse = await axios.get('/api/generate/sources');
          setEntropyData(sourcesResponse.data.sources);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        }
        break;
      case 'generate':
        try {
          const generateResponse = await axios.post('/api/generate', {
            count: 100,
            min: 1,
            max: 100,
            sourcesToUse: ['cubeacon', 'randomorg', 'nist', 'internet', 'iss'],
            combineMethod: 'hash',
            runTests: true
          });
          setStatisticalResults(generateResponse.data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        }
        break;
      default:
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
        break;
    }
  };

  const resetDemo = () => {
    setIsRunning(false);
    setCurrentStep(0);
    setAnimationProgress(0);
    setEntropyData([]);
    setStatisticalResults(null);
    setShowSteps(false);
    setSteps(demoSteps.map(step => ({ ...step, status: 'pending' })));
  };

  const getStepIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle color="success" />;
      case 'active': return <PlayArrow color="primary" />;
      case 'error': return <Error color="error" />;
      default: return <Science color="disabled" />;
    }
  };


  const getDetailedExplanation = (stepId: string) => {
    switch (stepId) {
      case 'init':
        return '–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ä–µ–¥—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.';
      case 'entropy':
        return '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç–æ–π–∫–æ—Å—Ç—å.';
      case 'combine':
        return '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã—Å–æ–∫–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏.';
      case 'generate':
        return '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏.';
      case 'test':
        return '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º NIST –∏ DIEHARD.';
      case 'verify':
        return '–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.';
      default:
        return '–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.';
    }
  };


  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <Typography variant="h2" gutterBottom sx={{ textAlign: 'center', mb: 4 }}>
          üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
        </Typography>
      </motion.div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 4 }}>
        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
          <Button
            variant="contained"
            size="large"
            startIcon={<PlayArrow />}
            onClick={startDemo}
            disabled={isRunning}
            sx={{ borderRadius: '20px', px: 4 }}
          >
            {isRunning ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é'}
          </Button>
        </motion.div>

        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
          <Button
            variant="outlined"
            size="large"
            startIcon={<Refresh />}
            onClick={resetDemo}
            disabled={isRunning}
            sx={{ borderRadius: '20px', px: 4 }}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        </motion.div>
      </Box>


      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
      <AnimatePresence>
        {isRunning && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <Card sx={{ mb: 4 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom sx={{ textAlign: 'center' }}>
                  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                </Typography>
                <LinearProgress
                  variant="determinate"
                  value={animationProgress}
                  sx={{
                    height: 8,
                    borderRadius: 4,
                    background: 'rgba(255, 255, 255, 0.1)',
                    '& .MuiLinearProgress-bar': {
                      background: 'linear-gradient(90deg, #00d4ff, #ff6b35)',
                      borderRadius: 4,
                    },
                  }}
                />
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', mt: 1 }}>
                  {Math.round(animationProgress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                </Typography>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Stepper —Å —à–∞–≥–∞–º–∏ */}
      <AnimatePresence>
        {showSteps && (
          <motion.div
            initial={{ opacity: 0, y: 30, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -30, scale: 0.9 }}
            transition={{ 
              duration: 0.6, 
              ease: "easeOut",
              delay: 0.2
            }}
          >
            <Card sx={{ mb: 4 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom sx={{ mb: 3 }}>
                  üîÑ –≠—Ç–∞–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª ({steps.length} —à–∞–≥–æ–≤)
                </Typography>
                <Stepper activeStep={currentStep} orientation="vertical">
                  {steps.map((step, index) => (
                    <Step key={step.id}>
                      <StepLabel
                        sx={{
                          '& .MuiStepLabel-label': {
                            color: step.status === 'completed' ? '#00ff00' : 
                                   step.status === 'active' ? '#00d4ff' : 'rgba(255, 255, 255, 0.5)',
                            fontWeight: step.status === 'active' ? 600 : 400,
                          },
                        }}
                      >
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          {getStepIcon(step.status)}
                          <Typography variant="h6">{step.title}</Typography>
                        </Box>
                      </StepLabel>
                      <StepContent>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                          {step.description}
                        </Typography>
                        <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'primary.main' }}>
                          {getDetailedExplanation(step.id)}
                        </Typography>
                      </StepContent>
                    </Step>
                  ))}
                </Stepper>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
      <AnimatePresence>
        {statisticalResults && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <Card sx={{ mb: 4 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                </Typography>
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle1" gutterBottom>
                      –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞:
                    </Typography>
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
                      {statisticalResults.result?.numbers?.map((number: number, index: number) => (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, scale: 0 }}
                          animate={{ opacity: 1, scale: 1 }}
                          transition={{ 
                            duration: 0.3, 
                            delay: index * 0.1,
                            ease: "easeOut"
                          }}
                        >
                          <Chip
                            label={number}
                            sx={{
                              background: 'linear-gradient(45deg, #00d4ff, #ff6b35)',
                              color: 'white',
                              fontWeight: 'bold',
                            }}
                          />
                        </motion.div>
                      ))}
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      Hash: {statisticalResults.result?.hash}
                    </Typography>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle1" gutterBottom>
                      –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã:
                    </Typography>
                    {statisticalResults.tests && (
                      <Box>
                        <Typography variant="body2">
                          –û–±—â–∏–π –±–∞–ª–ª: {statisticalResults.tests.overallScore?.toFixed(1)}%
                        </Typography>
                        <Typography variant="body2">
                          –°—Ç–∞—Ç—É—Å: {statisticalResults.tests.passed ? 'PASS' : 'FAIL'}
                        </Typography>
                      </Box>
                    )}
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø–µ—Ä–µ–º–µ—â–µ–Ω –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
      {statisticalResults?.result?.numbers && (
        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1, mb: 4 }}>
          <Button
            variant={visualizationType === 'transformation' ? 'contained' : 'outlined'}
            onClick={() => setVisualizationType('transformation')}
            sx={{ borderRadius: '15px' }}
          >
            üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
          </Button>
          <Button
            variant={visualizationType === 'randomwalk' ? 'contained' : 'outlined'}
            onClick={() => setVisualizationType('randomwalk')}
            sx={{ borderRadius: '15px' }}
          >
            üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ
          </Button>
          <Button
            variant={visualizationType === 'quantum' ? 'contained' : 'outlined'}
            onClick={() => setVisualizationType('quantum')}
            sx={{ borderRadius: '15px' }}
          >
            ‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ
          </Button>
        </Box>
      )}

      {/* –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–Ω—Ç—Ä–æ–ø–∏–∏ */}
      <AnimatePresence>
        {visualizationType === 'transformation' && entropyData.length > 0 && statisticalResults?.result?.numbers && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <Card sx={{ mb: 4, borderRadius: '20px' }}>
              <CardContent sx={{ p: 0 }}>
                <Box sx={{ p: 3, pb: 0 }}>
                  <Typography variant="h5" sx={{ color: '#00d4ff', mb: 2, textAlign: 'center' }}>
                    üîÑ –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–Ω—Ç—Ä–æ–ø–∏–∏
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#b0b0b0', textAlign: 'center', mb: 3 }}>
                    <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω—Ç—Ä–æ–ø–∏–∏ (CU Beacon, NIST, Random.org) –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä SHA-512. 
                    –ö–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–µ—Ç 16 –±–∏—Ç –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞. –°—Ç—Ä–µ–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
                  </Typography>
                </Box>
                <Box sx={{ height: '600px' }}>
                  <EntropyTransformation 
                    entropyData={entropyData}
                    finalNumbers={statisticalResults.result.numbers}
                    isActive={true}
                  />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ */}
      <AnimatePresence>
        {visualizationType === 'randomwalk' && statisticalResults?.result?.numbers && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <Card sx={{ mb: 4, borderRadius: '20px' }}>
              <CardContent sx={{ p: 0 }}>
                <Box sx={{ p: 3, pb: 0 }}>
                  <Typography variant="h5" sx={{ color: '#00d4ff', mb: 2, textAlign: 'center' }}>
                    üé≤ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#b0b0b0', textAlign: 'center', mb: 3 }}>
                    <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –ö–∞–∂–¥–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —É–≥–æ–ª –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞. 
                    –ß–∏—Å–ª–æ 42 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–≥–ª–æ–º 151¬∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º 15 –ø–∏–∫—Å–µ–ª–µ–π. –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
                  </Typography>
                </Box>
                <Box sx={{ height: '600px' }}>
                  <RandomWalk 
                    numbers={statisticalResults.result.numbers}
                    isActive={true}
                  />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ö–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ */}
      <AnimatePresence>
        {visualizationType === 'quantum' && statisticalResults?.result?.numbers && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <Card sx={{ mb: 4, borderRadius: '20px' }}>
              <CardContent sx={{ p: 0 }}>
                <Box sx={{ p: 3, pb: 0 }}>
                  <Typography variant="h5" sx={{ color: '#00d4ff', mb: 2, textAlign: 'center' }}>
                    ‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ —á–∞—Å—Ç–∏—Ü
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#b0b0b0', textAlign: 'center', mb: 3 }}>
                    <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –ö–∞–∂–¥–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —ç–Ω–µ—Ä–≥–∏—é —á–∞—Å—Ç–∏—Ü—ã. 
                    –ß–∏—Å–ª–æ 73 —Å–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–∏—Ü—É –≤ –ø–æ–∑–∏—Ü–∏–∏ (450, 200) —Å —Ä–∞–∑–º–µ—Ä–æ–º 12px –∏ —ç–Ω–µ—Ä–≥–∏–µ–π 0.8. –°–≤—è–∑–∏ –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
                  </Typography>
                </Box>
                <Box sx={{ height: '720px' }}>
                  <QuantumField 
                    numbers={statisticalResults.result.numbers}
                    isActive={true}
                  />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </Box>
  );
};

export default DemoPage;

const axios = require('axios');
const crypto = require('crypto');

/**
 * Space Weather - –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –∏–∑–ª—É—á–µ–Ω–∏–∏
 * –ò—Å—Ç–æ—á–Ω–∏–∫: NOAA Space Weather Prediction Center
 */
class SpaceWeatherSource {
  constructor() {
    this.name = 'Space Weather';
    this.type = 'space_weather';
    this.icon = 'üåå';
    this.baseUrl = 'https://services.swpc.noaa.gov';
  }

  async generateNumbers(count = 1, min = 1, max = 100) {
    const startTime = Date.now();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ endpoints!)
      // –ò—Å—Ç–æ—á–Ω–∏–∫: https://services.swpc.noaa.gov/
      const [plasma, mag, xray] = await Promise.allSettled([
        // 1. –ü–ª–∞–∑–º–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ~1 –º–∏–Ω)
        axios.get(`${this.baseUrl}/json/rtsw/rtsw_mag_1m.json`, { timeout: 5000 }),
        
        // 2. –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        axios.get(`${this.baseUrl}/json/goes/primary/magnetometers-6-hour.json`, { timeout: 5000 }),
        
        // 3. X-ray –ø–æ—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        axios.get(`${this.baseUrl}/json/goes/primary/xrays-6-hour.json`, { timeout: 5000 })
      ]);

      // –°–æ–±–∏—Ä–∞–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é –∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const entropyData = [];
      let successfulCount = 0;
      const sourceStatus = [];
      
      // –î–∞–Ω–Ω—ã–µ –ø–ª–∞–∑–º—ã (–º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!)
      if (plasma.status === 'fulfilled' && plasma.value.data && Array.isArray(plasma.value.data)) {
        // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è max —ç–Ω—Ç—Ä–æ–ø–∏–∏
        const recent = plasma.value.data.slice(-10);
        entropyData.push(JSON.stringify(recent));
        successfulCount++;
        sourceStatus.push(`‚úÖ Solar Plasma (${recent.length} samples)`);
      } else {
        sourceStatus.push('‚ùå Solar Plasma');
      }
      
      // –î–∞–Ω–Ω—ã–µ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞ (–º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!)
      if (mag.status === 'fulfilled' && mag.value.data && Array.isArray(mag.value.data)) {
        const recent = mag.value.data.slice(-10);
        entropyData.push(JSON.stringify(recent));
        successfulCount++;
        sourceStatus.push(`‚úÖ Magnetometer (${recent.length} samples)`);
      } else {
        sourceStatus.push('‚ùå Magnetometer');
      }
      
      // X-ray –¥–∞–Ω–Ω—ã–µ (–º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!)
      if (xray.status === 'fulfilled' && xray.value.data && Array.isArray(xray.value.data)) {
        const recent = xray.value.data.slice(-10);
        entropyData.push(JSON.stringify(recent));
        successfulCount++;
        sourceStatus.push(`‚úÖ X-Ray Flux (${recent.length} samples)`);
      } else {
        sourceStatus.push('‚ùå X-Ray Flux');
      }

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (entropyData.length === 0) {
        console.log('  ‚ö†Ô∏è Space Weather: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        entropyData.push(
          Date.now().toString(),
          process.hrtime.bigint().toString(),
          crypto.randomBytes(32).toString('hex')
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω—Ç—Ä–æ–ø–∏–∏
      entropyData.push(
        Date.now().toString(),
        process.hrtime.bigint().toString(),
        process.cpuUsage().user.toString(),
        crypto.randomBytes(16).toString('hex')
      );

      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å—ë —á–µ—Ä–µ–∑ SHA-512
      const combinedEntropy = entropyData.join('|');
      let hash = crypto.createHash('sha512').update(combinedEntropy).digest();
      
      const numbers = [];
      const range = max - min + 1;
      
      for (let i = 0; i < count; i++) {
        hash = crypto.createHash('sha512')
          .update(hash)
          .update(i.toString())
          .update(process.hrtime.bigint().toString())
          .digest();
        const value = hash.readUInt32BE(0);
        numbers.push((value % range) + min);
      }
      
      const finalHash = crypto.createHash('sha256')
        .update(JSON.stringify(numbers) + combinedEntropy).digest('hex');

      return {
        source: this.name,
        type: this.type,
        icon: this.icon,
        numbers,
        timestamp: new Date().toISOString(),
        latency: Date.now() - startTime,
        hash: finalHash,
        proof: {
          dataSources: sourceStatus,
          successfulSources: successfulCount,
          totalSources: 3,
          description: '–†–µ–∞–ª—å–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)',
          dataProvider: 'NOAA Space Weather Prediction Center',
          updateFrequency: '~1 –º–∏–Ω—É—Ç–∞',
          verifyUrl: 'https://services.swpc.noaa.gov/json/rtsw/rtsw_mag_1m.json',
          apiEndpoints: [
            'json/rtsw/rtsw_mag_1m.json',
            'json/goes/primary/magnetometers-6-hour.json',
            'json/goes/primary/xrays-6-hour.json'
          ]
        }
      };
    } catch (error) {
      throw new Error(`Space Weather –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
  }

  async checkAvailability() {
    try {
      const response = await axios.get(
        `${this.baseUrl}/products/summary/solar-wind-mag-field.json`,
        { timeout: 5000 }
      );
      return { 
        available: true, 
        message: 'NOAA Space Weather –¥–æ—Å—Ç—É–ø–µ–Ω' 
      };
    } catch (error) {
      return { available: false, message: error.message };
    }
  }
}

module.exports = SpaceWeatherSource;


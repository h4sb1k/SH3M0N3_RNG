const axios = require('axios');
const crypto = require('crypto');

/**
 * ISS Position Source - –ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –ú–ö–°
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
 * –ú–ö–° –¥–≤–∏–∂–µ—Ç—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 27,600 –∫–º/—á –Ω–∞ –≤—ã—Å–æ—Ç–µ 400 –∫–º –Ω–∞–¥ –ó–µ–º–ª–µ–π
 */
class ISSPositionSource {
  constructor() {
    this.name = 'ISS Position';
    this.type = 'space_station';
    this.icon = 'üõ∞Ô∏è';
    this.baseUrl = 'https://api.wheretheiss.at/v1/satellites/25544';
  }

  async generateNumbers(count = 1, min = 1, max = 100) {
    const startTime = Date.now();
    
    try {
      console.log(`üõ∞Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ú–ö–°...`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ú–ö–°
      const response = await axios.get(this.baseUrl, {
        timeout: 10000,
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'RandomTrust/1.0'
        }
      });
      
      const issData = response.data;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–Ω—Ç—Ä–æ–ø–∏–∏
      const entropyData = {
        latitude: parseFloat(issData.latitude),
        longitude: parseFloat(issData.longitude),
        altitude: parseFloat(issData.altitude || 400),
        velocity: parseFloat(issData.velocity || 27600),
        timestamp: parseInt(issData.timestamp || Date.now() / 1000),
        visibility: issData.visibility || 'unknown'
      };
      
      console.log(`üõ∞Ô∏è –ú–ö–°: ${entropyData.latitude.toFixed(6)}¬∞, ${entropyData.longitude.toFixed(6)}¬∞, ${entropyData.altitude.toFixed(2)}–∫–º`);
      
      // –°–æ–∑–¥–∞–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–ö–°
      const entropyString = [
        entropyData.latitude.toString(),
        entropyData.longitude.toString(),
        entropyData.altitude.toString(),
        entropyData.velocity.toString(),
        entropyData.timestamp.toString(),
        Date.now().toString(),
        Math.random().toString()
      ].join('');
      
      // –•–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      let hash = crypto.createHash('sha512').update(entropyString).digest();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
      for (let i = 0; i < 3; i++) {
        hash = crypto.createHash('sha512')
          .update(hash)
          .update(`iss_round_${i}_${Date.now()}`)
          .digest();
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      const numbers = [];
      const range = max - min + 1;
      
      for (let i = 0; i < count; i++) {
        const slice = hash.slice((i * 8) % (hash.length - 8), ((i * 8) % (hash.length - 8)) + 8);
        const value = slice.readUInt32BE(0);
        numbers.push((value % range) + min);
      }
      
      const finalHash = crypto.createHash('sha256')
        .update(JSON.stringify(numbers) + hash.toString('hex'))
        .digest('hex');
      
      const latency = Date.now() - startTime;
      
      return {
        source: this.name,
        type: this.type,
        icon: this.icon,
        numbers: numbers,
        method: 'ISS_POSITION',
        hash: finalHash,
        timestamp: new Date().toISOString(),
        latency: latency,
        proof: {
          iss_data: entropyData,
          api_response: issData,
          entropy_string_length: entropyString.length,
          hash_rounds: 4
        }
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ú–ö–°: ${error.message}`);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fallbackData = {
        latitude: (Math.random() - 0.5) * 180,
        longitude: (Math.random() - 0.5) * 360,
        altitude: 400 + Math.random() * 50,
        velocity: 27600 + Math.random() * 1000,
        timestamp: Math.floor(Date.now() / 1000),
        visibility: 'unknown'
      };
      
      const entropyString = [
        fallbackData.latitude.toString(),
        fallbackData.longitude.toString(),
        fallbackData.altitude.toString(),
        fallbackData.velocity.toString(),
        fallbackData.timestamp.toString(),
        Date.now().toString(),
        Math.random().toString()
      ].join('');
      
      let hash = crypto.createHash('sha512').update(entropyString).digest();
      
      const numbers = [];
      const range = max - min + 1;
      
      for (let i = 0; i < count; i++) {
        const slice = hash.slice((i * 8) % (hash.length - 8), ((i * 8) % (hash.length - 8)) + 8);
        const value = slice.readUInt32BE(0);
        numbers.push((value % range) + min);
      }
      
      const finalHash = crypto.createHash('sha256')
        .update(JSON.stringify(numbers) + hash.toString('hex'))
        .digest('hex');
      
      const latency = Date.now() - startTime;
      
      return {
        source: this.name,
        type: this.type,
        icon: this.icon,
        numbers: numbers,
        method: 'ISS_POSITION_FALLBACK',
        hash: finalHash,
        timestamp: new Date().toISOString(),
        latency: latency,
        proof: {
          iss_data: fallbackData,
          error: error.message,
          fallback: true,
          entropy_string_length: entropyString.length,
          hash_rounds: 1
        }
      };
    }
  }

  async checkAvailability() {
    try {
      const response = await axios.get(this.baseUrl, { 
        timeout: 5000,
        headers: { 'Accept': 'application/json' }
      });
      
      const data = response.data;
      return { 
        available: data && typeof data.latitude === 'number' && typeof data.longitude === 'number', 
        message: 'ISS API –¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    } catch (error) {
      return { available: false, message: error.message };
    }
  }
}

module.exports = ISSPositionSource;

const express = require('express');
const router = express.Router();
const path = require('path');
const NISTTests = require('../tests/nistTests');  // –ù–ê–°–¢–û–Ø–©–ò–ï NIST —Ç–µ—Å—Ç—ã!
const BinaryFileGenerator = require('../tests/fileGenerator');
const TestOptimizedDataSplitter = require('../tests/testOptimizedDataSplitter');
const { getInstance: getDB } = require('../database/db');

const tester = new NISTTests();
const fileGen = new BinaryFileGenerator();
const dataSplitter = new TestOptimizedDataSplitter();
const db = getDB();

/**
 * POST /api/tests/run
 * –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
router.post('/run', (req, res) => {
  try {
    const { numbers } = req.body;

    if (!numbers || !Array.isArray(numbers) || numbers.length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª' });
    }

    const results = tester.runAllNISTTests(numbers);

    res.json({
      success: true,
      results,
      metadata: {
        sampleSize: numbers.length,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * POST /api/tests/generate-file
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª—è NIST –∏ DIEHARD —Ç–µ—Å—Ç–æ–≤
 */
router.post('/generate-file', async (req, res) => {
  try {
    const { 
      count = 1000000, 
      min = 0, 
      max = 1, 
      sources: sourceNames, 
      method = 'hash',
      scenario = 'standard' // quick, standard, full, professional
    } = req.body;

    if (!sourceNames || !Array.isArray(sourceNames) || sourceNames.length === 0) {
      return res.status(400).json({
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    const optimalSize = dataSplitter.getOptimalSize(scenario);
    console.log(`üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario}"...`);
    console.log(`üìä –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: ${optimalSize.total} –±–∏—Ç (NIST: ${optimalSize.nist}, DIEHARD: ${optimalSize.diehard})`);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–æ–º–±–∞–π–Ω–µ—Ä
    const CUBeaconSource = require('../sources/cuBeacon');
    const RandomOrgSource = require('../sources/randomOrg');
    const SpaceWeatherSource = require('../sources/spaceWeather');
    const NISTBeaconSource = require('../sources/nistBeacon');
    const InternetEntropySource = require('../sources/internetEntropy');
    const OpenWeatherMapSource = require('../sources/openWeatherMap');
    const RandomnessCombiner = require('../combiner');

    const sources = {
      cubeacon: new CUBeaconSource(),
      randomorg: new RandomOrgSource(),
      spaceweather: new SpaceWeatherSource(),
      nist: new NISTBeaconSource(),
      internet: new InternetEntropySource(),
      openweather: new OpenWeatherMapSource()
    };

    const combiner = new RandomnessCombiner();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const sourceData = [];
    const errors = [];
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏–π
    const maxRequestSize = 10000; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è Random.org
    const scenarioMultiplier = {
      quick: 0.1,
      standard: 0.5,
      full: 1.0,
      professional: 2.0
    };
    const optimalRequestSize = Math.min(1000 * scenarioMultiplier[scenario] || 1, maxRequestSize);
    const actualRequestSize = Math.min(count, optimalRequestSize);
    
    console.log(`  üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${actualRequestSize} —á–∏—Å–µ–ª –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario})`);
    
    for (const sourceName of sourceNames) {
      if (sources[sourceName]) {
        try {
          const source = sources[sourceName];
          const result = await source.generateNumbers(actualRequestSize, min, max);
          sourceData.push({
            source: sourceName,
            type: source.type,
            icon: source.icon,
            numbers: result.numbers,
            hash: result.hash,
            timestamp: result.timestamp
          });
          console.log(`  ‚úÖ ${source.name}: ${result.numbers.length} —á–∏—Å–µ–ª`);
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${sourceName}:`, error.message);
          errors.push({ source: sourceName, error: error.message });
        }
      }
    }

    if (sourceData.length === 0) {
      return res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
        errors: errors
      });
    }

    console.log(`  üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º ${sourceData.length} –∏–∑ ${sourceNames.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const combinedResult = combiner.combine(sourceData, method);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log(`  üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤...`);
    const dataSplit = dataSplitter.splitNumbersForTests(combinedResult.numbers, scenario);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    const splitReport = dataSplitter.createSplitReport(dataSplit);
    
    console.log(`  üìä NIST: ${dataSplit.nist.count} –±–∏—Ç (${dataSplit.nist.tests.available.length} —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ)`);
    console.log(`  üìä DIEHARD: ${dataSplit.diehard.count} –±–∏—Ç (${dataSplit.diehard.tests.available.length} —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ)`);
    console.log(`  üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${dataSplit.efficiency.efficiency}`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const files = {
      nist: formatBitsToFile(dataSplit.nist.bits, 'nist'),
      diehard: formatBitsToFile(dataSplit.diehard.bits, 'diehard'),
      combined: formatBitsToFile(dataSplit.total.bits, 'combined')
    };
    
    const fileSize = Buffer.byteLength(files.combined.content, 'utf8');
    
    console.log(`‚úÖ –§–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario}"`);
    console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${dataSplit.total.count} –±–∏—Ç`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fileSize / 1024).toFixed(1)} KB`);
    console.log(`üìÑ –°—Ç—Ä–æ–∫: ${files.combined.lines}`);
    
    res.json({
      success: true,
      scenario: scenario,
      count: dataSplit.total.count,
      fileSize,
      fileContent: files.combined.content,
      sources: sourceNames,
      method,
      lines: files.combined.lines,
      splitReport: splitReport,
      files: {
        nist: {
          content: files.nist.content,
          lines: files.nist.lines,
          bits: dataSplit.nist.count
        },
        diehard: {
          content: files.diehard.content,
          lines: files.diehard.lines,
          bits: dataSplit.diehard.count
        },
        combined: {
          content: files.combined.content,
          lines: files.combined.lines,
          bits: dataSplit.total.count
        }
      },
      message: `–§–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario}"`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({
      error: error.message
    });
  }
});

/**
 * GET /download/:filename
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */
router.get('/download/:filename', (req, res) => {
  try {
    const { filename } = req.params;
    const filePath = path.join(process.cwd(), filename);
    
    res.download(filePath, filename, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', err);
        res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏—Ç–æ–≤ –≤ —Ñ–∞–π–ª
function formatBitsToFile(bits, type) {
  const bitsString = bits.join('');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: 80 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  const lines = [];
  for (let i = 0; i < bitsString.length; i += 80) {
    lines.push(bitsString.substring(i, i + 80));
  }
  
  const content = lines.join('\n');
  
  return {
    content,
    lines: lines.length,
    bits: bits.length,
    type: type
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
function getExpansionMethod(targetBits, currentBits) {
  const efficiency = (currentBits / targetBits) * 100;
  
  if (efficiency >= 50) {
    return '–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (‚â•50%)';
  } else if (efficiency >= 20) {
    return '–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (‚â•20%)';
  } else if (efficiency >= 5) {
    return '–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (‚â•5%)';
  } else {
    return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (<5%)';
  }
}

module.exports = router;


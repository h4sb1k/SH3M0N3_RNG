const express = require('express');
const router = express.Router();
const multer = require('multer');
const fs = require('fs').promises;
const NISTTests = require('../tests/nistTests');  // –ü–æ–ª–Ω—ã–µ NIST —Ç–µ—Å—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞
const DIEHARDTests = require('../tests/diehardTests');  // DIEHARD —Ç–µ—Å—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞
const { getInstance: getDB } = require('../database/db');

const upload = multer({ dest: 'uploads/' });
const nistTester = new NISTTests();  // –ü–æ–ª–Ω—ã–µ NIST SP 800-22 —Ç–µ—Å—Ç—ã
const diehardTester = new DIEHARDTests();  // DIEHARD —Ç–µ—Å—Ç—ã
const db = getDB();

/**
 * POST /api/audit/upload
 * –°–¶–ï–ù–ê–†–ò–ô 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞
 */
router.post('/upload', upload.single('file'), async (req, res) => {
  try {
    if (!req.file && !req.body.numbers) {
      return res.status(400).json({
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞'
      });
    }

    let numbers = [];
    let source = 'paste';

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª
    if (req.file) {
      const content = await fs.readFile(req.file.path, 'utf8');
      // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
      numbers = content
        .replace(/[^0-9,\s\n-]/g, '')
        .split(/[\s,\n]+/)
        .map(n => parseInt(n.trim()))
        .filter(n => !isNaN(n));
      
      source = 'file';
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.unlink(req.file.path);
    } else {
      // –ï—Å–ª–∏ —á–∏—Å–ª–∞ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
      const input = req.body.numbers;
      if (Array.isArray(input)) {
        numbers = input;
      } else if (typeof input === 'string') {
        numbers = input
          .split(/[\s,\n]+/)
          .map(n => parseInt(n.trim()))
          .filter(n => !isNaN(n));
      }
    }

    if (numbers.length === 0) {
      return res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–∞'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const auditId = db.createAudit(numbers, source);

    res.json({
      success: true,
      auditId,
      numbersCount: numbers.length,
      source,
      message: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
      message: error.message
    });
  }
});

/**
 * POST /api/audit/analyze
 * –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
router.post('/analyze', async (req, res) => {
  try {
    const { auditId, numbers: directNumbers } = req.body;

    let numbers;
    if (auditId) {
      const audit = db.getAudit(auditId);
      if (!audit) {
        return res.status(404).json({ error: 'Audit –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      numbers = audit.numbers;
    } else if (directNumbers) {
      numbers = Array.isArray(directNumbers) ? directNumbers : 
                directNumbers.split(/[\s,]+/).map(n => parseInt(n)).filter(n => !isNaN(n));
    } else {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º auditId –∏–ª–∏ numbers' });
    }

    console.log(`üîç –ê–Ω–∞–ª–∏–∑ ${numbers.length} —á–∏—Å–µ–ª...`);

    // –î–ª—è –∞—É–¥–∏—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const dataSize = numbers.length;
    let testSelection = 'all';
    
    console.log(`üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${dataSize} —á–∏—Å–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —Ç–µ—Å—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    // –ó–∞–ø—É—Å–∫ NIST —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    console.log('üß™ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NIST SP 800-22 —Ç–µ—Å—Ç–æ–≤...');
    const nistResults = nistTester.runAllNISTTests(numbers, testSelection);
    console.log(`  NIST: ${nistResults.passedTests}/${nistResults.totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${nistResults.overallScore.toFixed(1)}%)`);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç–æ–≤ –¥–ª—è DIEHARD —Ç–µ—Å—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–∞)
    console.log('üß™ –ó–∞–ø—É—Å–∫ DIEHARD —Ç–µ—Å—Ç–æ–≤...');
    const binaryData = numbers.flatMap(num => {
      if (!isFinite(num)) {
        console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è DIEHARD: ${num}`);
        return [];
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ 32 –±–∏—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏
      const binary = Math.floor(num).toString(2).padStart(32, '0');
      return binary.split('').map(bit => parseInt(bit));
    });
    
    console.log(`  üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${numbers.length} —á–∏—Å–µ–ª –≤ ${binaryData.length} –±–∏—Ç–æ–≤`);
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–∞ - –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é
    const maxBits = Math.min(binaryData.length, 50000); // –ú–∞–∫—Å–∏–º—É–º 50,000 –±–∏—Ç–æ–≤ –¥–ª—è –∞—É–¥–∏—Ç–∞
    const optimizedBinaryData = binaryData.slice(0, maxBits);
    
    if (binaryData.length > maxBits) {
      console.log(`  ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ ${maxBits} –±–∏—Ç–æ–≤ –∏–∑ ${binaryData.length} –¥–ª—è –∞—É–¥–∏—Ç–∞`);
    }
    
    const diehardResults = await diehardTester.runAllTests(optimizedBinaryData);
    console.log(`  DIEHARD: ${diehardResults?.summary?.passed || 0}/${diehardResults?.summary?.total || 0} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${diehardResults?.overallScore || 0}%)`);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const testResults = {
      nist: nistResults,
      diehard: diehardResults,
      overallScore: Math.round((nistResults.overallScore + (diehardResults?.overallScore || 0)) / 2),
      totalTests: nistResults.totalTests + (diehardResults?.summary?.total || 0),
      passedTests: nistResults.passedTests + (diehardResults?.summary?.passed || 0),
      failedTests: (nistResults.totalTests - nistResults.passedTests) + (diehardResults?.summary?.failed || 0),
      skippedTests: diehardResults?.summary?.skipped || 0
    };

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;
    const sorted = [...numbers].sort((a, b) => a - b);
    const median = numbers.length % 2 === 0
      ? (sorted[numbers.length / 2 - 1] + sorted[numbers.length / 2]) / 2
      : sorted[Math.floor(numbers.length / 2)];

    // –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π
    const anomalies = detectAnomalies(numbers, testResults);

    // –í–µ—Ä–¥–∏–∫—Ç
    const verdict = {
      suitable: testResults.overallScore >= 50,
      score: testResults.overallScore,
      grade: getGrade(testResults.overallScore),
      recommendation: testResults.overallScore >= 50 
        ? '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö' 
        : '–î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ª–æ—Ç–µ—Ä—è—Ö'
    };

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö
    const detailedTests = {
      nist: {
        summary: {
          total: nistResults.totalTests,
          passed: nistResults.passedTests,
          failed: nistResults.totalTests - nistResults.passedTests,
          score: nistResults.overallScore,
          standard: nistResults.standard,
          significance: nistResults.significance
        },
        tests: Object.entries(nistResults.tests).map(([name, test]) => ({
          name: name,
          passed: test.passed,
          pValue: test.pValue,
          status: test.passed ? 'PASS' : 'FAIL',
          description: getNISTTestDescription(name),
          details: test
        }))
      },
      diehard: {
        summary: {
          total: diehardResults?.summary?.total || 0,
          passed: diehardResults?.summary?.passed || 0,
          failed: diehardResults?.summary?.failed || 0,
          skipped: diehardResults?.summary?.skipped || 0,
          score: diehardResults?.overallScore || 0
        },
        tests: diehardResults?.tests ? Object.entries(diehardResults.tests).map(([name, test]) => ({
          name: name,
          passed: test.status === 'PASS',
          pValue: test.pValue,
          status: test.status,
          description: getDIEHARDTestDescription(name),
          details: test
        })) : []
      }
    };

    const analysisResult = {
      numbers,
      statistics: { min, max, mean, median, count: numbers.length },
      tests: testResults,
      detailedTests: detailedTests,
      anomalies,
      verdict,
      analyzedAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    if (auditId) {
      db.updateAuditAnalysis(auditId, analysisResult);
    }

    res.json({
      success: true,
      analysis: analysisResult
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      message: error.message
    });
  }
});

/**
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function detectAnomalies(numbers, testResults) {
  const anomalies = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä—ã (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª)
  const frequencies = {};
  numbers.forEach(n => { frequencies[n] = (frequencies[n] || 0) + 1; });
  const avgFreq = numbers.length / Object.keys(frequencies).length;
  
  Object.entries(frequencies).forEach(([num, freq]) => {
    if (freq > avgFreq * 2) {
      anomalies.push({
        type: 'duplicates',
        severity: 'medium',
        message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∏—Å–ª–∞: ${num} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${freq} —Ä–∞–∑`
      });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
  const sortedNumbers = [...numbers].sort((a, b) => a - b);
  let progressionCount = 0;
  for (let i = 2; i < sortedNumbers.length; i++) {
    if (sortedNumbers[i] - sortedNumbers[i-1] === sortedNumbers[i-1] - sortedNumbers[i-2]) {
      progressionCount++;
    }
  }
  
  if (progressionCount > numbers.length * 0.1) {
    anomalies.push({
      type: 'patterns',
      severity: 'medium',
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
  const range = Math.max(...numbers) - Math.min(...numbers);
  const expectedRange = Math.max(...numbers) - Math.min(...numbers);
  if (range < expectedRange * 0.5) {
    anomalies.push({
      type: 'range',
      severity: 'low',
      message: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π'
    });
  }

  return anomalies;
}

function getGrade(score) {
  if (score >= 95) return 'A+';
  if (score >= 80) return 'A';
  if (score >= 60) return 'B+';
  if (score >= 45) return 'B';
  if (score >= 40) return 'C';
  return 'F';
}

/**
 * GET /api/audit/:auditId/report
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
router.get('/:auditId/report', async (req, res) => {
  try {
    const { auditId } = req.params;
    const audit = db.getAudit(auditId);

    if (!audit) {
      return res.status(404).json({ error: 'Audit –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!audit.analyzed) {
      return res.status(400).json({ error: '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    }

    res.json({
      success: true,
      report: audit
    });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * GET /api/audit/history
 * –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∞—É–¥–∏—Ç–æ–≤
 */
router.get('/history', (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 20;
    const audits = db.getRecentAudits(limit);

    res.json({
      success: true,
      audits,
      total: audits.length
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è NIST —Ç–µ—Å—Ç–∞
 */
function getNISTTestDescription(testName) {
  const descriptions = {
    monobit: 'Frequency (Monobit) Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 0 –∏ 1',
    blockFrequency: 'Block Frequency Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –≤ –±–ª–æ–∫–∞—Ö —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞',
    runs: 'Runs Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª–∏–Ω—É —Å–µ—Ä–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±–∏—Ç–æ–≤',
    longestRun: 'Longest Run of Ones Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –µ–¥–∏–Ω–∏—Ü',
    matrixRank: 'Binary Matrix Rank Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–Ω–≥ –±–∏–Ω–∞—Ä–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü',
    spectral: 'Discrete Fourier Transform Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ —Å–ø–µ–∫—Ç—Ä–µ',
    nonOverlappingTemplate: 'Non-overlapping Template Matching Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤',
    overlappingTemplate: 'Overlapping Template Matching Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —à–∞–±–ª–æ–Ω—ã',
    maurerUniversal: 'Maurer\'s Universal Statistical Test - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç',
    linearComplexity: 'Linear Complexity Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    serial: 'Serial Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö m-–±–∏—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
    approximateEntropy: 'Approximate Entropy Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    cumulativeSums: 'Cumulative Sums Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã',
    randomExcursions: 'Random Excursions Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –±–ª—É–∂–¥–∞–Ω–∏—è',
    randomExcursionsVariant: 'Random Excursions Variant Test - –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—É–∂–¥–∞–Ω–∏–π'
  };
  return descriptions[testName] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π NIST —Ç–µ—Å—Ç';
}

/**
 * POST /api/audit/analyze-async
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–∏–Ω–≥–æ–º
 */
router.post('/analyze-async', async (req, res) => {
  try {
    const { auditId, numbers: directNumbers } = req.body;

    let numbers;
    if (auditId) {
      const audit = db.getAudit(auditId);
      if (!audit) {
        return res.status(404).json({ error: 'Audit –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      numbers = audit.numbers;
    } else if (directNumbers) {
      numbers = Array.isArray(directNumbers) ? directNumbers : 
                directNumbers.split(/[\s,]+/).map(n => parseInt(n)).filter(n => !isNaN(n));
    } else {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º auditId –∏–ª–∏ numbers' });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞—É–¥–∏—Ç–∞
    const taskId = `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    db.createAudit(numbers, 'async', taskId);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    processAuditAsync(taskId, numbers);

    res.json({
      success: true,
      taskId: taskId,
      message: '–ê—É–¥–∏—Ç –∑–∞–ø—É—â–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏—Ç–∞',
      message: error.message
    });
  }
});

/**
 * GET /api/audit/status/:taskId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
 */
router.get('/status/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    const audit = db.getAudit(taskId);
    
    if (!audit) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –∞—É–¥–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      success: true,
      taskId: taskId,
      status: audit.status || 'running',
      progress: audit.progress || 0,
      currentStep: audit.currentStep || '',
      result: audit.result || null,
      error: audit.error || null
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
      message: error.message
    });
  }
});

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏—Ç–∞
 */
async function processAuditAsync(taskId, numbers) {
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ ${taskId} –¥–ª—è ${numbers.length} —á–∏—Å–µ–ª`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.updateAuditStatus(taskId, 'running', 0, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');

    // –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await new Promise(resolve => setTimeout(resolve, 500));
    db.updateAuditStatus(taskId, 'running', 20, '–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');

    // –®–∞–≥ 2: –°–±–æ—Ä —ç–Ω—Ç—Ä–æ–ø–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    db.updateAuditStatus(taskId, 'running', 30, '–°–±–æ—Ä —ç–Ω—Ç—Ä–æ–ø–∏–∏...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    db.updateAuditStatus(taskId, 'running', 50, '–≠–Ω—Ç—Ä–æ–ø–∏—è —Å–æ–±—Ä–∞–Ω–∞');

    // –®–∞–≥ 3: NIST —Ç–µ—Å—Ç—ã
    db.updateAuditStatus(taskId, 'running', 60, '–ó–∞–ø—É—Å–∫ NIST —Ç–µ—Å—Ç–æ–≤...');
    
    const dataSize = numbers.length;
    let testSelection = 'all';
    
    if (dataSize < 100) {
      testSelection = 'basic';
    } else if (dataSize < 1000) {
      testSelection = 'standard';
    }

    const nistResults = nistTester.runAllNISTTests(numbers, testSelection);
    db.updateAuditStatus(taskId, 'running', 75, 'NIST —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

    // –®–∞–≥ 4: DIEHARD —Ç–µ—Å—Ç—ã
    db.updateAuditStatus(taskId, 'running', 80, '–ó–∞–ø—É—Å–∫ DIEHARD —Ç–µ—Å—Ç–æ–≤...');
    
    const binaryData = numbers.flatMap(num => {
      if (!isFinite(num) || num < 0) return [];
      const binary = Math.floor(num).toString(2).padStart(8, '0');
      return binary.split('').map(bit => parseInt(bit));
    });
    
    const maxBits = Math.min(binaryData.length, 10000);
    const optimizedBinaryData = binaryData.slice(0, maxBits);
    
    const diehardResults = await diehardTester.runAllTests(optimizedBinaryData);
    db.updateAuditStatus(taskId, 'running', 90, 'DIEHARD —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

    // –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    db.updateAuditStatus(taskId, 'running', 95, '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    const testResults = {
      nist: nistResults,
      diehard: diehardResults,
      overallScore: Math.round((nistResults.overallScore + (diehardResults?.overallScore || 0)) / 2),
      totalTests: nistResults.totalTests + (diehardResults?.summary?.total || 0),
      passedTests: nistResults.passedTests + (diehardResults?.summary?.passed || 0),
      failedTests: (nistResults.totalTests - nistResults.passedTests) + (diehardResults?.summary?.failed || 0),
      skippedTests: diehardResults?.summary?.skipped || 0
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const sortedNumbers = [...numbers].sort((a, b) => a - b);
    const statistics = {
      min: sortedNumbers[0],
      max: sortedNumbers[sortedNumbers.length - 1],
      mean: numbers.reduce((a, b) => a + b, 0) / numbers.length,
      median: sortedNumbers[Math.floor(sortedNumbers.length / 2)],
      count: numbers.length
    };

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
    const anomalies = detectAnomalies(numbers, testResults);

    // –í–µ—Ä–¥–∏–∫—Ç
    const grade = getGrade(testResults.overallScore);
    const verdict = {
      suitable: testResults.overallScore >= 50,
      score: testResults.overallScore,
      grade: grade,
      recommendation: testResults.overallScore >= 50 
        ? '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö'
        : '–î–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ª–æ—Ç–µ—Ä—è—Ö'
    };

    const analysis = {
      numbers: numbers,
      statistics: statistics,
      tests: testResults,
      anomalies: anomalies,
      verdict: verdict,
      analyzedAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    db.updateAuditAnalysis(taskId, analysis);
    db.updateAuditStatus(taskId, 'completed', 100, '–ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

    console.log(`‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞—É–¥–∏—Ç ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∞—É–¥–∏—Ç–µ ${taskId}:`, error);
    db.updateAuditStatus(taskId, 'error', 0, '–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞', error.message);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è DIEHARD —Ç–µ—Å—Ç–∞
 */
function getDIEHARDTestDescription(testName) {
  const descriptions = {
    birthdaySpacings: 'Birthday Spacings Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É "–¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"',
    overlappingPermutations: 'Overlapping Permutations Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏',
    ranksOfMatrices: 'Ranks of Matrices Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–Ω–≥–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü',
    monkeyTests: 'Monkey Tests - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ "–æ–±–µ–∑—å—è–Ω—ã" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
    countTheOnes: 'Count the 1\'s Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤ –±–ª–æ–∫–∞—Ö',
    parkingLotTest: 'Parking Lot Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ "–ø–∞—Ä–∫–æ–≤–∫–∏"',
    minimumDistanceTest: 'Minimum Distance Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏',
    randomSpheresTest: 'Random Spheres Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ñ–µ—Ä—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ',
    squeezeTest: 'Squeeze Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∂–∞—Ç–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    overlappingSumsTest: 'Overlapping Sums Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Å—É–º–º—ã',
    runsTest: 'Runs Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    crapsTest: 'Craps Test - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä—É –≤ –∫–æ—Å—Ç–∏'
  };
  return descriptions[testName] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DIEHARD —Ç–µ—Å—Ç';
}

module.exports = router;


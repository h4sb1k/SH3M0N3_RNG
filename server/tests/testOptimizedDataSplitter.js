const crypto = require('crypto');

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤ NIST –∏ DIEHARD
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
 */
class TestOptimizedDataSplitter {
  constructor() {
    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è NIST SP 800-22 —Ç–µ—Å—Ç–æ–≤ (–≤ –±–∏—Ç–∞—Ö)
    this.nistRequirements = {
      frequency: 100,           // Test 1: Frequency (Monobit)
      blockFrequency: 100,      // Test 2: Block Frequency  
      cumulativeSums: 100,      // Test 3: Cumulative Sums
      runs: 100,                // Test 4: Runs
      longestRun: 128,          // Test 5: Longest Run
      binaryMatrix: 100000,     // Test 6: Binary Matrix Rank
      discreteFourier: 1000,   // Test 7: Discrete Fourier Transform
      nonOverlapping: 1000000, // Test 8: Non-overlapping Template
      overlapping: 1000000,   // Test 9: Overlapping Template
      universal: 1000000,      // Test 10: Universal Statistical
      approximateEntropy: 1000000, // Test 11: Approximate Entropy
      randomExcursions: 1000000,    // Test 12: Random Excursions
      randomExcursionsVariant: 1000000, // Test 13: Random Excursions Variant
      serial: 1000000,         // Test 14: Serial
      linearComplexity: 1000000 // Test 15: Linear Complexity
    };

    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è DIEHARD —Ç–µ—Å—Ç–æ–≤ (–≤ –±–∏—Ç–∞—Ö)
    this.diehardRequirements = {
      birthdaySpacings: 10000,      // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      overlappingPermutations: 10000, // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      ranksOfMatrices: 20000,       // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      monkeyTests: 100000,          // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      countTheOnes: 100000,         // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      parkingLot: 50000,            // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      minimumDistance: 100000,      // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      randomSpheres: 100000,        // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      squeeze: 100000,              // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      overlappingSums: 100000,     // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      runs: 100000,                // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      craps: 200000                // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    };

    // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    this.optimalSizes = {
      // –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã)
      quick: {
        nist: 1000,      // 1000 –±–∏—Ç –¥–ª—è –±–∞–∑–æ–≤—ã—Ö NIST —Ç–µ—Å—Ç–æ–≤
        diehard: 10000,  // 10000 –±–∏—Ç –¥–ª—è –±–∞–∑–æ–≤—ã—Ö DIEHARD —Ç–µ—Å—Ç–æ–≤
        total: 11000     // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
      },
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ)
      standard: {
        nist: 100000,    // 100000 –±–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ NIST —Ç–µ—Å—Ç–æ–≤
        diehard: 100000, // 100000 –±–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ DIEHARD —Ç–µ—Å—Ç–æ–≤
        total: 200000    // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
      },
      
      // –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ —Ç–µ—Å—Ç—ã)
      full: {
        nist: 1000000,   // 1000000 –±–∏—Ç –¥–ª—è –≤—Å–µ—Ö NIST —Ç–µ—Å—Ç–æ–≤
        diehard: 200000, // 200000 –±–∏—Ç –¥–ª—è –≤—Å–µ—Ö DIEHARD —Ç–µ—Å—Ç–æ–≤
        total: 1200000   // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
      },
      
      // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
      professional: {
        nist: 10000000,  // 10MB –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        diehard: 1000000, // 1MB –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        total: 11000000  // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
      }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  getOptimalSize(scenario = 'standard') {
    return this.optimalSizes[scenario] || this.optimalSizes.standard;
  }

  /**
   * –†–∞–∑–¥–µ–ª—è–µ—Ç —á–∏—Å–ª–∞ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è NIST –∏ DIEHARD —Ç–µ—Å—Ç–æ–≤
   */
  splitNumbersForTests(numbers, scenario = 'standard') {
    const optimalSize = this.getOptimalSize(scenario);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–∞ –≤ –±–∏—Ç—ã
    const allBits = this.numbersToBits(numbers);
    
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${numbers.length} —á–∏—Å–µ–ª ‚Üí ${allBits.length} –±–∏—Ç–æ–≤`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const split = {
      nist: {
        bits: allBits.slice(0, optimalSize.nist),
        count: optimalSize.nist,
        description: `NIST —Ç–µ—Å—Ç—ã (${optimalSize.nist} –±–∏—Ç)`,
        tests: this.getAvailableNISTTests(optimalSize.nist)
      },
      diehard: {
        bits: allBits.slice(optimalSize.nist, optimalSize.nist + optimalSize.diehard),
        count: optimalSize.diehard,
        description: `DIEHARD —Ç–µ—Å—Ç—ã (${optimalSize.diehard} –±–∏—Ç)`,
        tests: this.getAvailableDIEHARDTests(optimalSize.diehard)
      },
      total: {
        bits: allBits.slice(0, optimalSize.total),
        count: optimalSize.total,
        description: `–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä (${optimalSize.total} –±–∏—Ç)`
      },
      scenario: scenario,
      efficiency: this.calculateEfficiency(numbers.length, optimalSize.total)
    };

    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞—Å—à–∏—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (allBits.length < optimalSize.total) {
      console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${allBits.length}/${optimalSize.total} –±–∏—Ç`);
      split.nist.bits = this.expandBits(split.nist.bits, optimalSize.nist, numbers);
      split.diehard.bits = this.expandBits(split.diehard.bits, optimalSize.diehard, numbers);
      split.total.bits = [...split.nist.bits, ...split.diehard.bits];
    }

    return split;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–∞ –≤ –±–∏—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
   */
  numbersToBits(numbers) {
    const bits = [];
    
    for (const num of numbers) {
      if (!isFinite(num) || num < 0) {
        console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: ${num}`);
        continue;
      }
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const binary = Math.floor(num).toString(2);
      bits.push(...binary.split('').map(bit => parseInt(bit)));
    }
    
    return bits;
  }

  /**
   * –†–∞—Å—à–∏—Ä—è–µ—Ç –±–∏—Ç—ã –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  expandBits(bits, targetSize, originalNumbers) {
    if (bits.length >= targetSize) {
      return bits.slice(0, targetSize);
    }

    const expandedBits = [...bits];
    let seed = originalNumbers.slice(0, 10).join('') + bits.length;
    let hashCount = 0;

    while (expandedBits.length < targetSize) {
      const hashInput = seed + expandedBits.length + Date.now() + Math.random();
      const hash = crypto.createHash('sha512').update(hashInput).digest();
      
      const newBits = Array.from(hash).map(byte => 
        byte.toString(2).padStart(8, '0')
      ).join('').split('').map(bit => parseInt(bit));
      
      expandedBits.push(...newBits);
      seed = crypto.createHash('sha256').update(seed + hash.toString('hex')).digest('hex');
      hashCount++;
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (hashCount > 10000) break;
    }

    console.log(`üîÑ –†–∞—Å—à–∏—Ä–µ–Ω–æ –¥–æ ${targetSize} –±–∏—Ç (${hashCount} —Ö–µ—à–µ–π)`);
    return expandedBits.slice(0, targetSize);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ NIST —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  getAvailableNISTTests(bitCount) {
    const available = [];
    const unavailable = [];

    Object.entries(this.nistRequirements).forEach(([test, required]) => {
      if (bitCount >= required) {
        available.push({ name: test, required, status: 'available' });
      } else {
        unavailable.push({ name: test, required, status: 'unavailable', reason: `–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${required} –±–∏—Ç` });
      }
    });

    return { available, unavailable };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ DIEHARD —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  getAvailableDIEHARDTests(bitCount) {
    const available = [];
    const unavailable = [];

    Object.entries(this.diehardRequirements).forEach(([test, required]) => {
      if (bitCount >= required) {
        available.push({ name: test, required, status: 'available' });
      } else {
        unavailable.push({ name: test, required, status: 'unavailable', reason: `–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${required} –±–∏—Ç` });
      }
    });

    return { available, unavailable };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  calculateEfficiency(inputNumbers, outputBits) {
    const inputBits = inputNumbers * 8; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 8 –±–∏—Ç –Ω–∞ —á–∏—Å–ª–æ
    const efficiency = (inputBits / outputBits) * 100;
    
    return {
      inputBits,
      outputBits,
      efficiency: efficiency.toFixed(1) + '%',
      quality: efficiency >= 50 ? 'high' : efficiency >= 20 ? 'medium' : 'low'
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  createSplitReport(split) {
    return {
      summary: {
        scenario: split.scenario,
        totalBits: split.total.count,
        nistBits: split.nist.count,
        diehardBits: split.diehard.count,
        efficiency: split.efficiency
      },
      nist: {
        bits: split.nist.count,
        availableTests: split.nist.tests.available.length,
        unavailableTests: split.nist.tests.unavailable.length,
        tests: split.nist.tests
      },
      diehard: {
        bits: split.diehard.count,
        availableTests: split.diehard.tests.available.length,
        unavailableTests: split.diehard.tests.unavailable.length,
        tests: split.diehard.tests
      },
      recommendations: this.getRecommendations(split)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  getRecommendations(split) {
    const recommendations = [];

    if (split.efficiency.quality === 'low') {
      recommendations.push({
        type: 'warning',
        message: '–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —á–∏—Å–µ–ª.'
      });
    }

    if (split.nist.tests.unavailable.length > 0) {
      recommendations.push({
        type: 'info',
        message: `–î–ª—è –ø–æ–ª–Ω–æ–≥–æ NIST —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${Math.max(...Object.values(this.nistRequirements))} –±–∏—Ç`
      });
    }

    if (split.diehard.tests.unavailable.length > 0) {
      recommendations.push({
        type: 'info',
        message: `–î–ª—è –ø–æ–ª–Ω–æ–≥–æ DIEHARD —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${Math.max(...Object.values(this.diehardRequirements))} –±–∏—Ç`
      });
    }

    return recommendations;
  }
}

module.exports = TestOptimizedDataSplitter;


const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Å 1 000 000 –±–∏–Ω–∞—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ NIST STS, Dieharder, TestU01
 */
class BinaryFileGenerator {
  async generateFile(sources, filename = null) {
    const startTime = Date.now();
    const targetBits = 1000000; // 1 –º–∏–ª–ª–∏–æ–Ω –±–∏—Ç
    const bitsArray = [];
    
    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${targetBits} –±–∏–Ω–∞—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const allNumbers = [];
    for (const source of sources) {
      allNumbers.push(...source.numbers);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ –±–∏—Ç—ã
    for (const num of allNumbers) {
      const bits = num.toString(2).padStart(32, '0');
      bitsArray.push(...bits.split(''));
      if (bitsArray.length >= targetBits) break;
    }
    
    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    let seed = sources.map(s => s.hash).join('');
    while (bitsArray.length < targetBits) {
      const hash = crypto.createHash('sha512').update(seed + bitsArray.length).digest();
      const bits = Array.from(hash).map(byte => byte.toString(2).padStart(8, '0')).join('');
      bitsArray.push(...bits.split(''));
      seed = hash.toString('hex');
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ä–æ–≤–Ω–æ 1M
    const finalBits = bitsArray.slice(0, targetBits).join('');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: 80 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const lines = [];
    for (let i = 0; i < finalBits.length; i += 80) {
      lines.push(finalBits.substring(i, i + 80));
    }
    const content = lines.join('\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const fileName = filename || `random_bits_${Date.now()}.txt`;
    const filePath = path.join(process.cwd(), fileName);
    
    await fs.writeFile(filePath, content, 'utf8');
    
    const generationTime = Date.now() - startTime;
    
    console.log(`‚úÖ –§–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${targetBits} –±–∏—Ç (${lines.length} —Å—Ç—Ä–æ–∫)`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${generationTime}ms`);
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞
    const zeros = (finalBits.match(/0/g) || []).length;
    const ones = (finalBits.match(/1/g) || []).length;
    const balance = Math.abs(zeros - ones) / targetBits;
    
    return {
      fileName,
      filePath,
      totalBits: targetBits,
      lines: lines.length,
      generationTime,
      statistics: {
        zeros,
        ones,
        balance: (balance * 100).toFixed(2) + '%',
        balanceGood: balance < 0.01
      },
      instructions: {
        nistSTS: `assess ${targetBits} < ${fileName}`,
        dieharder: `dieharder -a -g 202 -f ${fileName}`,
        testU01: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É TestU01 —Å —Ñ–∞–π–ª–æ–º'
      },
      downloadUrl: `/download/${fileName}`
    };
  }

  async generateFromAPI(sourcesData) {
    return this.generateFile(sourcesData);
  }
}

module.exports = BinaryFileGenerator;




